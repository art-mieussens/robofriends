{"version":3,"sources":["components/searchBox.js","components/scroll.js","components/card.js","components/cardList.js","components/errorBoundary.js","components/CounterButton.js","components/Header.js","containers/app.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","_ref","searchChange","console","log","react_default","a","createElement","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Card","name","email","id","alt","src","concat","CardList","robots","map","user","i","card","key","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","searchBox","components_scroll","errorBoundary","cardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","ispending","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f6a15b3.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ( { searchChange }) => {\n    console.log('Searchbox');\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid white', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;\n\n\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './card';\n\nconst CardList = ({ robots }) => {\n    console.log(CardList);\n    if (false) {\n        throw new Error('NOOOOOO!');\n    }\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return {count: state.count + 1 }\n    })\n  }\n\n  render() {\n    console.log('CounterButton');\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    )\n  }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    console.log('Header');\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton color={'red'} />\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SearchBox from '../components/searchBox';\nimport Scroll from '../components/scroll';\nimport CardList from '../components/cardList';\nimport ErrorBoundary from '../components/errorBoundary';\nimport './app.css'\nimport { setSearchField, requestRobots } from '../actions';\nimport Header from '../components/Header';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n       onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n       onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter( robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return (\n            <div className='tc'>\n                <Header />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    { isPending ? <h1>Loading</h1> :\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    }\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n\n } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n\n } from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) { \n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {ispending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state\n        }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from  'redux-thunk';\nimport './index.css';\nimport App from './containers/app';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store  = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ,document.getElementById('root')\n);\n    \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}